# This is a basic workflow that is manually triggered

name: Manual Run automatic Maven Release

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      comment:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Comment for release'
        # Default value if no value is explicitly provided
        default: 'Start release from WEB UI'
        # Input has to be provided for the workflow to run
        required: true

env:
  NEXUS_USER: '${{ secrets.NEXUS_USER }}'
  NEXUS_PASSWORD: '${{ secrets.NEXUS_PASSWORD }}'
  GPG_KEY_ID_GITHUB_TECHUSER: '${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  print_params:
    name: Print parameters

    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Runs a single command using the runners shell
      - name: Print
        run: |
          echo "github.event.inputs.comment ${{ github.event.inputs.comment }}"
          echo "github.ref: ${{ github.ref }}"
          echo "github.event.ref: ${{ github.event.ref }}"
          echo "github.repository: ${{ github.repository }}"
          echo "github.workspace: ${{ github.workspace }}"

  release_job:
    name: Maven release

    # Permission ellenorzes https://github.community/t/who-has-permission-to-workflow-dispatch/133981
    if: contains('["rombow","speter555"]', github.actor)

    runs-on: ubuntu-latest

    steps:

      - name: Import GPG key
        env:
          # GPG privat kulcs, ami armor-al exportalva (kezdete: '-----BEGIN PGP PRIVATE KEY BLOCK-----') ez az egesz tartalom base64 elkodolva, az betoltve a secrets tartalomnak
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY_GITHUB_TECHUSER }}
        # dekodoljuk a base64 elkodolt privat kulcsot es betoltjuk
        run: |
          mkdir -p ~/.gnupg/
          echo "$GPG_SIGNING_KEY" | base64 --decode > ~/.gnupg/private.key
          gpg --import ~/.gnupg/private.key


      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          # A tartalma egy PEM formatumos (kezdete: '-----BEGIN RSA PRIVATE KEY-----') SSH kulcs
          key: ${{ secrets.SSH_PRIVATE_KEY_GITHUB_TECHUSER }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS }} # jelenleg ures a tartalma
          # config: ${{ secrets.CONFIG }} # ssh_config; optional

      - name: Configure GIT for signed commit
        env:
          # GPG kulcs azonositoja
          GPG_KEY_ID_GITHUB_TECHUSER: ${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}
        run: |
          git config --global user.name "innovitech-robot"
          git config --global user.email "github-techuser@innovitech.hu"
          git config --global user.signingkey "$GPG_KEY_ID_GITHUB_TECHUSER"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true


      - name: Checkout main
        uses: actions/checkout@v3
        with:
          # Ne az a user legyen aki a workflow-ot inditotta
          token: ${{ secrets.GH_TOKEN_TECHUSER_JAVA }}
          ref: main

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'

      - name: Maven release prepare DryRun and release branch
        id: preset
        shell: bash
        run: |
          mvn -B -s $GITHUB_WORKSPACE/.github/.m2/settings.xml  release:prepare -DdryRun=true

          SCM_TAG=`cat release.properties | grep -w "scm.tag" | cut -d'=' -f2`
          echo "SCM_TAG=${SCM_TAG}" 
          echo "SCM_TAG=${SCM_TAG}" >> $GITHUB_OUTPUT
          
          mvn -B release:clean --file pom.xml
          
          RELEASE_BRANCH_NAME=release/${SCM_TAG%.*}.x
          echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}"
          echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}" >> $GITHUB_OUTPUT
                    
          echo new release branch name is ${RELEASE_BRANCH_NAME}
          MR_BRANCH_NAME=feature/${SCM_TAG}-release
          echo "MR_BRANCH_NAME=${MR_BRANCH_NAME}"
          echo "MR_BRANCH_NAME=${MR_BRANCH_NAME}" >> $GITHUB_OUTPUT


      - name: Create release branch
        id: createreleasebranch
        shell: bash
        run: |
          git checkout -b ${{steps.preset.outputs.RELEASE_BRANCH_NAME}} main
          git push --set-upstream origin ${{steps.preset.outputs.RELEASE_BRANCH_NAME}}

      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          # Ne az a user legyen aki a workflow-ot inditotta
          token: ${{ secrets.GH_TOKEN_TECHUSER_JAVA }}
          ref: ${{ steps.preset.outputs.RELEASE_BRANCH_NAME }}

      - name: Maven release PREPARE
        run: |
          mvn -B release:prepare
  #
  #    - name: Maven release PERFORM
      #      run: mvn -B -s $GITHUB_WORKSPACE/.github/.m2/settings.xml  release:perform


      - name: Checkout main
        uses: actions/checkout@v3
        with:
          # Ne az a user legyen aki a workflow-ot inditotta
          token: ${{ secrets.GH_TOKEN_TECHUSER_JAVA }}
          ref: main

      - name: Create bump version branch
        id: createbumpbranch
        shell: bash
        run: |
          git checkout -b ${{steps.preset.outputs.MR_BRANCH_NAME}} main
          git push --set-upstream origin ${{steps.preset.outputs.MR_BRANCH_NAME}}

      - name: Checkout bump version branch
        uses: actions/checkout@v3
        with:
          # Ne az a user legyen aki a workflow-ot inditotta
          token: ${{ secrets.GH_TOKEN_TECHUSER_JAVA }}
          ref: ${{ steps.preset.outputs.MR_BRANCH_NAME }}

      - name: Bump version branch
        id: bumpbranch
        shell: bash
        run: |
          NEXT_MASTER_VERSION=$(echo  ${{steps.preset.outputs.SCM_TAG}} |  awk -F'.' '{print $1"."$2+1"."0}' |  sed s/[.]$//)
          TARGET_BRANCH_NEXT_VERSION=$(echo $NEXT_MASTER_VERSION | rev | cut -d '-' -f1 | rev)-SNAPSHOT
          echo next master branch version is $TARGET_BRANCH_NEXT_VERSION
          mvn -B release:update-versions -DdevelopmentVersion=$TARGET_BRANCH_NEXT_VERSION
          
          COMMIT_MESSAGE="Bump version to $TARGET_BRANCH_NEXT_VERSION"
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE"
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          
          git add .
          git commit -a -m "$COMMIT_MESSAGE"
          echo next version on main is $TARGET_BRANCH_NEXT_VERSION

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4.2.3
        with:
          token: ${{ secrets.GH_TOKEN_TECHUSER_JAVA }}
          commit-message: ${{steps.preset.outputs.COMMIT_MESSAGE}}
          branch:  ${{steps.preset.outputs.MR_BRANCH_NAME}}
          title: ${{steps.preset.outputs.COMMIT_MESSAGE}}
          committer: InnovITech Kft. - Github technical user <github-techuser@innovitech.hu>
          author: InnovITech Kft. - Github technical user <github-techuser@innovitech.hu>
          base: main
